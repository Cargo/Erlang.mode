<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>
	<head>
		<name>Erlang</name>
		<charsintokens><![CDATA[_-0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@:]]></charsintokens>
		<charsincompletion><![CDATA[_-0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@:]]></charsincompletion>
		<folding toplevel="1" />
	</head>
	<states>
		<default id="Base" scope="meta.default">
			<keywords id="Atoms" scope="constant.numeric.keyword">
				<regex>\b([a-z][a-zA-Z0-9@_]*)\b</regex>
			</keywords>
			<keywords id="Variables" scope="language.variable">
				<regex>\b([_]?[A-Z][a-zA-Z0-9@_]*)\b</regex>
				<regex>\b(_)\b</regex>
			</keywords>
			<keywords id="Records" scope="language.function">
				<regex>#([a-z][a-zA-Z0-9@_]*)\b</regex>
				<regex>-record\s*\(([a-zA-Z0-9@_]*)\b</regex>
			</keywords>
			<keywords id="Macros" scope="language.function">
				<regex>\?([A-Za-z][A-Za-z0-9_]*)</regex>
				<regex>-(?:define|undef|ifdef|ifndef)\s*\(([A-Za-z][A-Za-z0-9_]*)\b</regex>
			</keywords>
			<keywords id="Function Calls" scope="language.function">
				<regex>([0-9a-zA-Z_-]+(?::?)[0-9a-zA-Z_-]+)\(</regex>
				<regex>([^\?][0-9a-zA-Z_-]+)\(</regex>
			</keywords>
			<keywords id="Processors and Bit Syntax" scope="markup.processing.languageswitch">
				<regex>((&lt;&lt;)|(>>)|[#\?:])</regex>
			</keywords>
			<keywords id="Separators" casesensitive="no" useforautocomplete="no" scope="language.operator">
				<regex>(->)</regex>
			</keywords>
			<keywords id="List Comprehensions" casesensitive="no" useforautocomplete="no" scope="language.operator">
				<regex>(&lt;\-)</regex>
				<regex>(\|\|)</regex>
			</keywords>
			<keywords id="Numbers" useforautocomplete="no" scope="constant.numeric">
				<regex>(?&lt;![\w\d_])((?:0*(?:(?:[0-9]#[0-9]+)|(?:[1-3][0-9]#[0-9a-zA-Z]+)))|(?:(?:(?:[0-9]+\.[0-9]+))(?:[eE][+\-]?[0-9]+)?)|[0-9]+)(?![\w\d_])</regex>
			</keywords>
			<keywords id="Keywords" casesensitive="yes" useforautocomplete="yes" scope="keyword">
				<string>after</string>
				<string>and</string>
				<string>andalso</string>
				<string>band</string>
				<string>begin</string>
				<string>bnot</string>
				<string>bor</string>
				<string>bsl</string>
				<string>bsr</string>
				<string>bxor</string>
				<string>case</string>
				<string>catch</string>
				<string>cond</string>
				<string>div</string>
				<string>end</string>
				<string>fun</string>
				<string>if</string>
				<string>let</string>
				<string>not</string>
				<string>of</string>
				<string>or</string>
				<string>orelse</string>
				<string>receive</string>
				<string>rem</string>
				<string>try</string>
				<string>when</string>
				<string>xor</string>
			</keywords>
			<keywords id="Built-in Functions" useforautocomplete="yes" scope="keyword">
				<regex>\b(abs)(?:\()</regex>
				<regex>\b(adler32)(?:\()</regex>
				<regex>\b(adler32_combine)(?:\()</regex>
				<regex>\b(append_element)(?:\()</regex>
				<regex>\b(apply)(?:\()</regex>
				<regex>\b(atom_to_binary)(?:\()</regex>
				<regex>\b(atom_to_list)(?:\()</regex>
				<regex>\b(binary_part)(?:\()</regex>
				<regex>\b(binary_to_atom)(?:\()</regex>
				<regex>\b(binary_to_existing_atom)(?:\()</regex>
				<regex>\b(binary_to_list)(?:\()</regex>
				<regex>\b(bitstring_to_list)(?:\()</regex>
				<regex>\b(binary_to_term)(?:\()</regex>
				<regex>\b(bit_size)(?:\()</regex>
				<regex>\b(bump_reductions)(?:\()</regex>
				<regex>\b(byte_size)(?:\()</regex>
				<regex>\b(cancel_timer)(?:\()</regex>
				<regex>\b(check_old_code)(?:\()</regex>
				<regex>\b(check_process_code)(?:\()</regex>
				<regex>\b(concat_binary)(?:\()</regex>
				<regex>\b(crc32)(?:\()</regex>
				<regex>\b(crc32_combine)(?:\()</regex>
				<regex>\b(date)(?:\()</regex>
				<regex>\b(decode_packet)(?:\()</regex>
				<regex>\b(delete_module)(?:\()</regex>
				<regex>\b(demonitor)(?:\()</regex>
				<regex>\b(disconnect_node)(?:\()</regex>
				<regex>\b(display)(?:\()</regex>
				<regex>\b(element)(?:\()</regex>
				<regex>\b(erase)(?:\()</regex>
				<regex>\b(error)(?:\()</regex>
				<regex>\b(exit)(?:\()</regex>
				<regex>\b(external_size)(?:\()</regex>
				<regex>\b(float)(?:\()</regex>
				<regex>\b(float_to_list)(?:\()</regex>
				<regex>\b(fun_info)(?:\()</regex>
				<regex>\b(fun_to_list)(?:\()</regex>
				<regex>\b(function_exported)(?:\()</regex>
				<regex>\b(garbage_collect)(?:\()</regex>
				<regex>\b(get)(?:\()</regex>
				<regex>\b(get_cookie)(?:\()</regex>
				<regex>\b(get_keys)(?:\()</regex>
				<regex>\b(get_stacktrace)(?:\()</regex>
				<regex>\b(group_leader)(?:\()</regex>
				<regex>\b(halt)(?:\()</regex>
				<regex>\b(hash)(?:\()</regex>
				<regex>\b(hd)(?:\()</regex>
				<regex>\b(hibernate)(?:\()</regex>
				<regex>\b(integer_to_list)(?:\()</regex>
				<regex>\b(iolist_to_binary)(?:\()</regex>
				<regex>\b(iolist_size)(?:\()</regex>
				<regex>\b(is_alive)(?:\()</regex>
				<regex>\b(is_atom)(?:\()</regex>
				<regex>\b(is_binary)(?:\()</regex>
				<regex>\b(is_bitstring)(?:\()</regex>
				<regex>\b(is_boolean)(?:\()</regex>
				<regex>\b(is_builtin)(?:\()</regex>
				<regex>\b(is_float)(?:\()</regex>
				<regex>\b(is_function)(?:\()</regex>
				<regex>\b(is_function)(?:\()</regex>
				<regex>\b(is_integer)(?:\()</regex>
				<regex>\b(is_list)(?:\()</regex>
				<regex>\b(is_number)(?:\()</regex>
				<regex>\b(is_pid)(?:\()</regex>
				<regex>\b(is_port)(?:\()</regex>
				<regex>\b(is_process_alive)(?:\()</regex>
				<regex>\b(is_record)(?:\()</regex>
				<regex>\b(is_record)(?:\()</regex>
				<regex>\b(is_reference)(?:\()</regex>
				<regex>\b(is_tuple)(?:\()</regex>
				<regex>\b(length)(?:\()</regex>
				<regex>\b(link)(?:\()</regex>
				<regex>\b(list_to_atom)(?:\()</regex>
				<regex>\b(list_to_binary)(?:\()</regex>
				<regex>\b(list_to_bitstring)(?:\()</regex>
				<regex>\b(list_to_existing_atom)(?:\()</regex>
				<regex>\b(list_to_float)(?:\()</regex>
				<regex>\b(list_to_integer)(?:\()</regex>
				<regex>\b(list_to_pid)(?:\()</regex>
				<regex>\b(list_to_tuple)(?:\()</regex>
				<regex>\b(load_module)(?:\()</regex>
				<regex>\b(load_nif)(?:\()</regex>
				<regex>\b(loaded)(?:\()</regex>
				<regex>\b(localtime)(?:\()</regex>
				<regex>\b(localtime_to_universaltime)(?:\()</regex>
				<regex>\b(make_ref)(?:\()</regex>
				<regex>\b(make_tuple)(?:\()</regex>
				<regex>\b(make_tuple)(?:\()</regex>
				<regex>\b(max)(?:\()</regex>
				<regex>\b(md5)(?:\()</regex>
				<regex>\b(md5_final)(?:\()</regex>
				<regex>\b(md5_init)(?:\()</regex>
				<regex>\b(md5_update)(?:\()</regex>
				<regex>\b(memory)(?:\()</regex>
				<regex>\b(min)(?:\()</regex>
				<regex>\b(module_loaded)(?:\()</regex>
				<regex>\b(monitor)(?:\()</regex>
				<regex>\b(monitor_node)(?:\()</regex>
				<regex>\b(nif_error)(?:\()</regex>
				<regex>\b(node)(?:\()</regex>
				<regex>\b(nodes)(?:\()</regex>
				<regex>\b(now)(?:\()</regex>
				<regex>\b(open_port)(?:\()</regex>
				<regex>\b(phash)(?:\()</regex>
				<regex>\b(phash2)(?:\()</regex>
				<regex>\b(pid_to_list)(?:\()</regex>
				<regex>\b(port_close)(?:\()</regex>
				<regex>\b(port_command)(?:\()</regex>
				<regex>\b(port_connect)(?:\()</regex>
				<regex>\b(port_control)(?:\()</regex>
				<regex>\b(port_call)(?:\()</regex>
				<regex>\b(port_info)(?:\()</regex>
				<regex>\b(port_to_list)(?:\()</regex>
				<regex>\b(ports)(?:\()</regex>
				<regex>\b(pre_loaded)(?:\()</regex>
				<regex>\b(process_display)(?:\()</regex>
				<regex>\b(process_flag)(?:\()</regex>
				<regex>\b(process_info)(?:\()</regex>
				<regex>\b(processes)(?:\()</regex>
				<regex>\b(purge_module)(?:\()</regex>
				<regex>\b(put)(?:\()</regex>
				<regex>\b(raise)(?:\()</regex>
				<regex>\b(read_timer)(?:\()</regex>
				<regex>\b(ref_to_list)(?:\()</regex>
				<regex>\b(register)(?:\()</regex>
				<regex>\b(registered)(?:\()</regex>
				<regex>\b(resume_process)(?:\()</regex>
				<regex>\b(round)(?:\()</regex>
				<regex>\b(self)(?:\()</regex>
				<regex>\b(send)(?:\()</regex>
				<regex>\b(send_after)(?:\()</regex>
				<regex>\b(send_nosuspend)(?:\()</regex>
				<regex>\b(set_cookie)(?:\()</regex>
				<regex>\b(setelement)(?:\()</regex>
				<regex>\b(size)(?:\()</regex>
				<regex>\b(spawn)(?:\()</regex>
				<regex>\b(spawn_link)(?:\()</regex>
				<regex>\b(spawn_monitor)(?:\()</regex>
				<regex>\b(spawn_opt)(?:\()</regex>
				<regex>\b(split_binary)(?:\()</regex>
				<regex>\b(start_timer)(?:\()</regex>
				<regex>\b(statistics)(?:\()</regex>
				<regex>\b(suspend_process)(?:\()</regex>
				<regex>\b(system_flag)(?:\()</regex>
				<regex>\b(system_info)(?:\()</regex>
				<regex>\b(system_monitor)(?:\()</regex>
				<regex>\b(system_profile)(?:\()</regex>
				<regex>\b(term_to_binary)(?:\()</regex>
				<regex>\b(throw)(?:\()</regex>
				<regex>\b(time)(?:\()</regex>
				<regex>\b(tl)(?:\()</regex>
				<regex>\b(trace)(?:\()</regex>
				<regex>\b(trace_delivered)(?:\()</regex>
				<regex>\b(trace_info)(?:\()</regex>
				<regex>\b(trace_pattern)(?:\()</regex>
				<regex>\b(trunc)(?:\()</regex>
				<regex>\b(tuple_size)(?:\()</regex>
				<regex>\b(tuple_to_list)(?:\()</regex>
				<regex>\b(universaltime)(?:\()</regex>
				<regex>\b(universaltime_to_localtime)(?:\()</regex>
				<regex>\b(unlink)(?:\()</regex>
				<regex>\b(unregister)(?:\()</regex>
				<regex>\b(whereis)(?:\()</regex>
				<regex>\b(yield)(?:\()</regex>
			</keywords>
			<keywords id="Functions" casesensitive="yes" useforautocomplete="yes" scope="keyword">
				<string>acos</string>
				<string>asin</string>
				<string>atan</string>
				<string>atan2</string>
				<string>cos</string>
				<string>cosh</string>
				<string>exp</string>
				<string>log</string>
				<string>log10</string>
				<string>pi</string>
				<string>pow</string>
				<string>power</string>
				<string>sin</string>
				<string>sinh</string>
				<string>sqrt</string>
				<string>tan</string>
				<string>tanh</string>
				<string>call</string>
				<string>module_info</string>
				<string>parse_transform</string>
				<string>undefined_function</string>
			</keywords>
			<keywords id="Directives" scope="keyword">
				<regex>(-compile)\(</regex>
				<regex>(-define)\(</regex>
				<regex>(-else)\(</regex>
				<regex>(-endif)</regex>
				<regex>(-export)\(</regex>
				<regex>(-file)\(</regex>
				<regex>(-ifdef)\(</regex>
				<regex>(-ifndef)\(</regex>
				<regex>(-import)\(</regex>
				<regex>(-include)\(</regex>
				<regex>(-include_lib)\(</regex>
				<regex>(-module)\(</regex>
				<regex>(-record)\(</regex>
				<regex>(-undef)\(</regex>
				<regex>(-author)\(</regex>
				<regex>(-copyright)\(</regex>
				<regex>(-doc)\(</regex>
				<regex>(-extends)\(</regex>
				<regex>(-behaviour)\(</regex>
				<!-- @TODO Handle -behavior, -type, -callback, and -spec -->
			</keywords>
			<keywords id="Processes" casesensitive="yes" useforautocomplete="yes" scope="keyword">
				<string>creation</string>
				<string>current_function</string>
				<string>dictionary</string>
				<string>group_leader</string>
				<string>heap_size</string>
				<string>high</string>
				<string>initial_call</string>
				<string>linked</string>
				<string>low</string>
				<string>memory_in_use</string>
				<string>message_queue</string>
				<string>net_kernel</string>
				<string>node</string>
				<string>normal</string>
				<string>priority</string>
				<string>reductions</string>
				<string>registered_name</string>
				<string>runnable</string>
				<string>running</string>
				<string>stack_trace</string>
				<string>status</string>
				<string>timer</string>
				<string>trap_exit</string>
				<string>waiting</string>
			</keywords>
			<keywords id="Ports" casesensitive="yes" useforautocomplete="yes" scope="keyword">
				<string>command</string>
				<string>count_in</string>
				<string>count_out</string>
				<string>creation</string>
				<string>in</string>
				<string>in_format</string>
				<string>linked</string>
				<string>node</string>
				<string>out</string>
				<string>owner</string>
				<string>packeting</string>
			</keywords>
			<keywords id="Nodes" casesensitive="yes" useforautocomplete="yes" scope="keyword">
				<string>atom_table</string>
				<string>communicating</string>
				<string>creation</string>
				<string>current_gc</string>
				<string>current_reductions</string>
				<string>current_runtime</string>
				<string>current_wall_clock</string>
				<string>distribution_port</string>
				<string>entry_points</string>
				<string>error_handler</string>
				<string>friends</string>
				<string>garbage_collection</string>
				<string>magic_cookie</string>
				<string>magic_cookies</string>
				<string>module_table</string>
				<string>monitored_nodes</string>
				<string>name</string>
				<string>next_ref</string>
				<string>port</string>
				<string>preloaded</string>
				<string>processes</string>
				<string>reductions</string>
				<string>ref_state</string>
				<string>registry</string>
				<string>runtime</string>
				<string>wall_clock</string>
			</keywords>
			<keywords id="Reserved" casesensitive="yes" useforautocomplete="yes" scope="keyword">
				<string>apply_lambda</string>
				<string>module_info</string>
				<string>module_lambdas</string>
				<string>record</string>
				<string>record_index</string>
				<string>record_info</string>
			</keywords>
			<keywords id="Extras" casesensitive="yes" useforautocomplete="yes" scope="keyword">
				<string>badarg</string>
				<string>nocookie</string>
				<string>false</string>
				<string>fun</string>
				<string>true</string>
			</keywords>
			<keywords id="Signals" casesensitive="yes" useforautocomplete="yes" scope="keyword">
				<string>badsig</string>
				<string>kill</string>
				<string>killed</string>
				<string>exit</string>
				<string>normal</string>
			</keywords>
		</default>
		<state id="SingleComment" type="comment" scope="comment.single">
			<begin>
				<regex>%</regex>
			</begin>
			<end>
				<regex>[\n\r]</regex>
			</end>
		</state>
		<state id="Character Literal" scope="string">
			<begin>
				<regex>\$</regex>
			</begin>
			<end>
				<regex>\\?.</regex>
			</end>
		</state>
		<state id="String" scope="string">
			<begin>
				<regex>"</regex>
			</begin>
			<end>
				<regex>(?&lt;!\\)(\\\\)*"</regex>
			</end>
		</state>
		<state id="Quoted Atoms" scope="constant.numeric.keyword">
			<begin>
				<regex>'</regex>
			</begin>
			<end>
				<regex>(?&lt;!\\)(\\\\)*'</regex>
			</end>
		</state>
		<state id="Block" type="block" foldable="yes">
			<begin>
				<regex>(?:\-\>)</regex>
			</begin>
			<end>
				<regex>(?:(?:(?:\;)|(?:\.))(?!\S))|(?:\s*(?=end\b))|(?:\s*(?=catch\b))</regex>
			</end>
			<import />
		</state>
		<state id="End Block" type="block" foldable="yes">
			<begin>
				<regex>(?:\b(?:(?:of)|(?:if)|(?:begin))\b)</regex>
			</begin>
			<end>
				<regex>(?:\bend\b)</regex>
			</end>
			<import />
		</state>
	</states>
</syntax>
